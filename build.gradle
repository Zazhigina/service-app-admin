import nu.studer.gradle.jooq.JooqEdition

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'nu.studer.jooq' version "${jooqPluginVersion}"
    id("org.springdoc.openapi-gradle-plugin") version "${springDocOpenApiGradlePluginVersion}"
    id 'java'
}
if (!hasProperty('buildProfile')) ext.buildProfile = "${defaultBuildProfile}"

if (project.file("profile-${buildProfile}.gradle").exists()) {
    if (buildProfile == "${defaultBuildProfile}") apply from: "profile-${buildProfile}.gradle"
}

group 'igc.mirror'
archivesBaseName = 'root'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
//    mavenCentral()
    maven {
        url "${mavenRepository}"
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    annotationProcessor {
        resolutionStrategy.activateDependencyLocking()
    }
}

dependencyLocking {
    lockMode = LockMode.STRICT
}

//fix vulnerability version logback-classic,logback-core
dependencyManagement {
     dependencies {
          dependencySet(group:'ch.qos.logback', version: '1.4.12') {
               entry 'logback-classic'
               entry 'logback-core'
          }
     }
}

dependencies {
    // logging
    implementation "ch.qos.logback.contrib:logback-json-classic:${loogbackContribJSONVersion}"
    implementation "ch.qos.logback.contrib:logback-jackson:${loogbackContribJacksonVersion}"

    // jdbc
    implementation "org.postgresql:postgresql:${postgreJDBCVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    //CORE
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // JOOQ
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqGenerator "jakarta.xml.bind:jakarta.xml.bind-api:${xmlBindVersion}"
    jooqGenerator "org.postgresql:postgresql:${postgreJDBCVersion}"

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // swagger and OpenAPI
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiStarterWebmvcUiVersion}"

    // flyway
    implementation "org.flywaydb:flyway-core:${flaywayVersion}"
}

test {
    useJUnitPlatform()
}

//sourceSets.main.java.srcDirs += "${jooqSrcDirs}"

jooq {
//    version = dependencyManagement.importedProperties['jooq.version']
    version = "${jooqVersion}"
    edition = JooqEdition.OSS

    configurations {
        main {
            generationTool {
                logging = 'WARN' //org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "${dbConnectionString}"
                    user = "${dbUser}"
                    password = "${dbPassword}"
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        excludes = '^(flyway).*'
                        schemata {
                            schema {
                                inputSchema = "${dbSchema}"
                            }
                        }
                    }
                    target {
                        packageName = 'jooqdata'
                        directory = "${jooqSrcDirs}"
                    }
                    generate {
                        newline = '\\r\\n'
                        javaTimeTypes = true
                        records = true
                        relations = true
                        pojos = true
                        daos = false
                        deprecated = false
                        instanceFields = true
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

openApi {
    outputDir.set(file("/docs"))
}

tasks.named('generateJooq').configure {
    // make jOOQ task participate in incremental builds (which is also a prerequisite for participating in build caching)
    allInputsDeclared = true

    // make jOOQ task participate in build caching
    outputs.cacheIf { true }
}

bootRun{
    println "Current profile: " + "${buildProfile}"
    systemProperty "spring.profiles.active", "${buildProfile}"
    systemProperty "javax.net.ssl.trustStore", "${project.rootDir}" + "${trustStore}"
    systemProperty "javax.net.ssl.trustStorePassword", "${trustStorePassword}"
}
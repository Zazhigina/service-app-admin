ARG BUILD_IMAGE_TAG=8.11.1-jdk21 \
	APP_IMAGE_TAG=21 \
	QUAYIO_IMAGE_REPOSITORY=nexus-quayio-registry.inlinegroup-c.ru \
	IMAGE_REPOSITORY=nexus-redsoft-registry.inlinegroup-c.ru \
	UBI9_REPO_URL="" \
	UBI9_REPO_URL_CA="" \
	UBI9_REPO_URL_SUB_CA="" \
	MAVEN_REPOSITORY=https://nexus-oss.inlinegroup-c.ru/repository/maven-public/ \
	MAVEN_REPOSITORY_PLUGIN=https://nexus-oss.inlinegroup-c.ru/repository/maven2-gradle-plugin/ \
	MAVEN_REPOSITORY_ROOT_CA_URL="" \
	MAVEN_REPOSITORY_SUB_CA_URL="" \
	BUILD_APP_DIR='/application'

## Build image
FROM $QUAYIO_IMAGE_REPOSITORY/klovercloud/gradle:$BUILD_IMAGE_TAG AS build-stage

ARG BUILD_APP_DIR \
	MAVEN_REPOSITORY \
	MAVEN_REPOSITORY_PLUGIN \
	MAVEN_REPOSITORY_ROOT_CA_URL \
	MAVEN_REPOSITORY_SUB_CA_URL

## Set build envirnoment
ENV TZ=Europe/Moscow \
	GRADLE_USER_HOME=$BUILD_APP_DIR/gradle

WORKDIR /application

## Copy application
COPY . .

## Add certificate
RUN JKS_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) \
	&& if [ -n "$MAVEN_REPOSITORY_ROOT_CA_URL" ]; then wget --no-check-certificate -q -O - $MAVEN_REPOSITORY_ROOT_CA_URL > ./root-ca-maven.crt \
	&& keytool -import -noprompt -alias root -file ./root-ca-maven.crt -keystore ./maven.jks -storepass $JKS_KEY; fi \
	&& if [ -n "$MAVEN_REPOSITORY_SUB_CA_URL" ]; then wget --no-check-certificate -q -O - $MAVEN_REPOSITORY_SUB_CA_URL > ./sub-ca-maven.crt \
	&& keytool -import -noprompt -alias sub -file ./sub-ca-maven.crt -keystore ./maven.jks -storepass $JKS_KEY; fi \
	&& if [ -n "$MAVEN_REPOSITORY_ROOT_CA_URL" ] || [ -n "$MAVEN_REPOSITORY_SUB_CA_URL" ]; then \
	gradle build --init-script init.gradle -PmavenRepository=$MAVEN_REPOSITORY -PmavenRepositoryPlugin=$MAVEN_REPOSITORY_PLUGIN \
	-Djavax.net.ssl.trustStore="/application/maven.jks" -Djavax.net.ssl.trustStorePassword=$JKS_KEY; else \
	gradle build --init-script init.gradle -PmavenRepository=$MAVEN_REPOSITORY -PmavenRepositoryPlugin=$MAVEN_REPOSITORY_PLUGIN; fi

## Add project
RUN java -Djarmode=tools -jar $BUILD_APP_DIR/build/libs/root.jar extract --layers --launcher --destination extracted

## OpenJDK runtime image
FROM $IMAGE_REPOSITORY/ubi8/openjdk-21:$APP_IMAGE_TAG

ARG BUILD_APP_DIR \
	UBI9_REPO_URL \
	UBI9_REPO_URL_CA \
	UBI9_REPO_URL_SUB_CA \
	UID=1001

## Set runtime envirnoment
ENV TZ=Europe/Moscow \
	RUNTIME_PATH='/tmp'

## Set permissions so that the container runs without root access
USER root
RUN mkdir -p ${BUILD_APP_DIR} && \
	chown -R $UID:0 ${BUILD_APP_DIR}
USER $UID

WORKDIR /application

COPY --chown=$UID:0 ./docker/entrypoint.sh /
RUN chmod a+x /entrypoint.sh

COPY --chown=$UID:0 --from=build-stage $BUILD_APP_DIR/extracted/dependencies/ .
COPY --chown=$UID:0 --from=build-stage $BUILD_APP_DIR/extracted/spring-boot-loader/ .
COPY --chown=$UID:0 --from=build-stage $BUILD_APP_DIR/extracted/snapshot-dependencies/ .
COPY --chown=$UID:0 --from=build-stage $BUILD_APP_DIR/extracted/application/ .

VOLUME ["$RUNTIME_PATH"]

EXPOSE 8080
EXPOSE 8081

ENTRYPOINT ["/entrypoint.sh"]
CMD ["org.springframework.boot.loader.launch.JarLauncher"]

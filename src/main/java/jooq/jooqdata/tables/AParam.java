/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.AParamRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Ведение параметров приложения
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AParam extends TableImpl<AParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.a_param</code>
     */
    public static final AParam A_PARAM = new AParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AParamRecord> getRecordType() {
        return AParamRecord.class;
    }

    /**
     * The column <code>admin.a_param.key</code>. Первичный ключ
     */
    public final TableField<AParamRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR.nullable(false), this, "Первичный ключ");

    /**
     * The column <code>admin.a_param.name</code>. Наименование
     */
    public final TableField<AParamRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "Наименование");

    /**
     * The column <code>admin.a_param.val</code>. Значение
     */
    public final TableField<AParamRecord, String> VAL = createField(DSL.name("val"), SQLDataType.VARCHAR, this, "Значение");

    /**
     * The column <code>admin.a_param.create_date</code>. Дата и время создания
     */
    public final TableField<AParamRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.a_param.create_user</code>. Автор создания
     */
    public final TableField<AParamRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.a_param.last_update_date</code>. Дата и время
     * изменения
     */
    public final TableField<AParamRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.a_param.last_update_user</code>. Автор изменения
     */
    public final TableField<AParamRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    /**
     * The column <code>admin.a_param.default_val</code>. Значение по умолчанию
     */
    public final TableField<AParamRecord, String> DEFAULT_VAL = createField(DSL.name("default_val"), SQLDataType.VARCHAR, this, "Значение по умолчанию");

    private AParam(Name alias, Table<AParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private AParam(Name alias, Table<AParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Ведение параметров приложения"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.a_param</code> table reference
     */
    public AParam(String alias) {
        this(DSL.name(alias), A_PARAM);
    }

    /**
     * Create an aliased <code>admin.a_param</code> table reference
     */
    public AParam(Name alias) {
        this(alias, A_PARAM);
    }

    /**
     * Create a <code>admin.a_param</code> table reference
     */
    public AParam() {
        this(DSL.name("a_param"), null);
    }

    public <O extends Record> AParam(Table<O> child, ForeignKey<O, AParamRecord> key) {
        super(child, key, A_PARAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<AParamRecord> getPrimaryKey() {
        return Keys.A_PARAM_PK;
    }

    @Override
    public AParam as(String alias) {
        return new AParam(DSL.name(alias), this);
    }

    @Override
    public AParam as(Name alias) {
        return new AParam(alias, this);
    }

    @Override
    public AParam as(Table<?> alias) {
        return new AParam(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AParam rename(String name) {
        return new AParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AParam rename(Name name) {
        return new AParam(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AParam rename(Table<?> name) {
        return new AParam(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, LocalDateTime, String, LocalDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

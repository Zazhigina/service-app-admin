/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TAnswerVersionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Вариант ответа на вопрос
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TAnswerVersion extends TableImpl<TAnswerVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_answer_version</code>
     */
    public static final TAnswerVersion T_ANSWER_VERSION = new TAnswerVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAnswerVersionRecord> getRecordType() {
        return TAnswerVersionRecord.class;
    }

    /**
     * The column <code>admin.t_answer_version.id</code>. Первичный ключ
     */
    public final TableField<TAnswerVersionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column <code>admin.t_answer_version.question_id</code>.
     * Преднастроенный вопрос
     */
    public final TableField<TAnswerVersionRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "Преднастроенный вопрос");

    /**
     * The column <code>admin.t_answer_version.name</code>. Наименование
     */
    public final TableField<TAnswerVersionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "Наименование");

    /**
     * The column <code>admin.t_answer_version.order_no</code>. Номер варианта
     * ответа
     */
    public final TableField<TAnswerVersionRecord, Integer> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.INTEGER, this, "Номер варианта ответа");

    /**
     * The column <code>admin.t_answer_version.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TAnswerVersionRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_answer_version.create_user</code>. Автор
     * создания
     */
    public final TableField<TAnswerVersionRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_answer_version.last_update_date</code>. Дата и
     * время изменения
     */
    public final TableField<TAnswerVersionRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_answer_version.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TAnswerVersionRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    /**
     * The column <code>admin.t_answer_version.is_default</code>. Индикатор
     * выбора ответа
     */
    public final TableField<TAnswerVersionRecord, Boolean> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.BOOLEAN, this, "Индикатор выбора ответа");

    /**
     * The column <code>admin.t_answer_version.type</code>. Тип ответа
     */
    public final TableField<TAnswerVersionRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "Тип ответа");

    private TAnswerVersion(Name alias, Table<TAnswerVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAnswerVersion(Name alias, Table<TAnswerVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Вариант ответа на вопрос"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_answer_version</code> table reference
     */
    public TAnswerVersion(String alias) {
        this(DSL.name(alias), T_ANSWER_VERSION);
    }

    /**
     * Create an aliased <code>admin.t_answer_version</code> table reference
     */
    public TAnswerVersion(Name alias) {
        this(alias, T_ANSWER_VERSION);
    }

    /**
     * Create a <code>admin.t_answer_version</code> table reference
     */
    public TAnswerVersion() {
        this(DSL.name("t_answer_version"), null);
    }

    public <O extends Record> TAnswerVersion(Table<O> child, ForeignKey<O, TAnswerVersionRecord> key) {
        super(child, key, T_ANSWER_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TAnswerVersionRecord> getPrimaryKey() {
        return Keys.T_ANSWER_VERSION_PK;
    }

    @Override
    public List<ForeignKey<TAnswerVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.T_ANSWER_VERSION__T_ANSWER_VERSION_FK);
    }

    private transient TQuestion _tQuestion;

    /**
     * Get the implicit join path to the <code>admin.t_question</code> table.
     */
    public TQuestion tQuestion() {
        if (_tQuestion == null)
            _tQuestion = new TQuestion(this, Keys.T_ANSWER_VERSION__T_ANSWER_VERSION_FK);

        return _tQuestion;
    }

    @Override
    public TAnswerVersion as(String alias) {
        return new TAnswerVersion(DSL.name(alias), this);
    }

    @Override
    public TAnswerVersion as(Name alias) {
        return new TAnswerVersion(alias, this);
    }

    @Override
    public TAnswerVersion as(Table<?> alias) {
        return new TAnswerVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAnswerVersion rename(String name) {
        return new TAnswerVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAnswerVersion rename(Name name) {
        return new TAnswerVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAnswerVersion rename(Table<?> name) {
        return new TAnswerVersion(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, Integer, LocalDateTime, String, LocalDateTime, String, Boolean, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super String, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TAppControlRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Управление сервисами(заглушка)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAppControl extends TableImpl<TAppControlRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_app_control</code>
     */
    public static final TAppControl T_APP_CONTROL = new TAppControl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAppControlRecord> getRecordType() {
        return TAppControlRecord.class;
    }

    /**
     * The column <code>admin.t_app_control.name</code>. Наименование
     */
    public final TableField<TAppControlRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "Наименование");

    /**
     * The column <code>admin.t_app_control.description</code>. Описание
     */
    public final TableField<TAppControlRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "Описание");

    /**
     * The column <code>admin.t_app_control.enabled</code>. 1 работает в штатном
     * режиме, 0 показывать заглушку
     */
    public final TableField<TAppControlRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "1 работает в штатном режиме, 0 показывать заглушку");

    /**
     * The column <code>admin.t_app_control.create_date</code>.
     */
    public final TableField<TAppControlRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>admin.t_app_control.create_user</code>.
     */
    public final TableField<TAppControlRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>admin.t_app_control.last_update_date</code>.
     */
    public final TableField<TAppControlRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>admin.t_app_control.last_update_user</code>.
     */
    public final TableField<TAppControlRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "");

    private TAppControl(Name alias, Table<TAppControlRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAppControl(Name alias, Table<TAppControlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Управление сервисами(заглушка)"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_app_control</code> table reference
     */
    public TAppControl(String alias) {
        this(DSL.name(alias), T_APP_CONTROL);
    }

    /**
     * Create an aliased <code>admin.t_app_control</code> table reference
     */
    public TAppControl(Name alias) {
        this(alias, T_APP_CONTROL);
    }

    /**
     * Create a <code>admin.t_app_control</code> table reference
     */
    public TAppControl() {
        this(DSL.name("t_app_control"), null);
    }

    public <O extends Record> TAppControl(Table<O> child, ForeignKey<O, TAppControlRecord> key) {
        super(child, key, T_APP_CONTROL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TAppControlRecord> getPrimaryKey() {
        return Keys.T_APP_CONTROL_PKEY;
    }

    @Override
    public TAppControl as(String alias) {
        return new TAppControl(DSL.name(alias), this);
    }

    @Override
    public TAppControl as(Name alias) {
        return new TAppControl(alias, this);
    }

    @Override
    public TAppControl as(Table<?> alias) {
        return new TAppControl(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAppControl rename(String name) {
        return new TAppControl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAppControl rename(Name name) {
        return new TAppControl(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAppControl rename(Table<?> name) {
        return new TAppControl(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Boolean, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

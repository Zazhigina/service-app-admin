/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TCalendarDayRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Календарь рабочих и выходных дней (исключения)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TCalendarDay extends TableImpl<TCalendarDayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_calendar_day</code>
     */
    public static final TCalendarDay T_CALENDAR_DAY = new TCalendarDay();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCalendarDayRecord> getRecordType() {
        return TCalendarDayRecord.class;
    }

    /**
     * The column <code>admin.t_calendar_day.id</code>. Идентификатор
     */
    public final TableField<TCalendarDayRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Идентификатор");

    /**
     * The column <code>admin.t_calendar_day.date</code>. Дата
     */
    public final TableField<TCalendarDayRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "Дата");

    /**
     * The column <code>admin.t_calendar_day.working</code>. Рабочий день?
     */
    public final TableField<TCalendarDayRecord, Boolean> WORKING = createField(DSL.name("working"), SQLDataType.BOOLEAN.nullable(false), this, "Рабочий день?");

    /**
     * The column <code>admin.t_calendar_day.create_date</code>. Дата создания
     */
    public final TableField<TCalendarDayRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата создания");

    /**
     * The column <code>admin.t_calendar_day.create_user</code>. Автор создания
     */
    public final TableField<TCalendarDayRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_calendar_day.last_update_date</code>. Дата и
     * время изменения
     */
    public final TableField<TCalendarDayRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_calendar_day.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TCalendarDayRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TCalendarDay(Name alias, Table<TCalendarDayRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCalendarDay(Name alias, Table<TCalendarDayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Календарь рабочих и выходных дней (исключения)"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_calendar_day</code> table reference
     */
    public TCalendarDay(String alias) {
        this(DSL.name(alias), T_CALENDAR_DAY);
    }

    /**
     * Create an aliased <code>admin.t_calendar_day</code> table reference
     */
    public TCalendarDay(Name alias) {
        this(alias, T_CALENDAR_DAY);
    }

    /**
     * Create a <code>admin.t_calendar_day</code> table reference
     */
    public TCalendarDay() {
        this(DSL.name("t_calendar_day"), null);
    }

    public <O extends Record> TCalendarDay(Table<O> child, ForeignKey<O, TCalendarDayRecord> key) {
        super(child, key, T_CALENDAR_DAY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TCalendarDayRecord> getPrimaryKey() {
        return Keys.T_CALENDAR_DAY_PK;
    }

    @Override
    public List<UniqueKey<TCalendarDayRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.T_CALENDAR_DAY_UN);
    }

    @Override
    public TCalendarDay as(String alias) {
        return new TCalendarDay(DSL.name(alias), this);
    }

    @Override
    public TCalendarDay as(Name alias) {
        return new TCalendarDay(alias, this);
    }

    @Override
    public TCalendarDay as(Table<?> alias) {
        return new TCalendarDay(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalendarDay rename(String name) {
        return new TCalendarDay(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalendarDay rename(Name name) {
        return new TCalendarDay(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalendarDay rename(Table<?> name) {
        return new TCalendarDay(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDate, Boolean, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDate, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDate, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TCalendarProductionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Производственный календарь
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCalendarProduction extends TableImpl<TCalendarProductionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_calendar_production</code>
     */
    public static final TCalendarProduction T_CALENDAR_PRODUCTION = new TCalendarProduction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCalendarProductionRecord> getRecordType() {
        return TCalendarProductionRecord.class;
    }

    /**
     * The column <code>admin.t_calendar_production.id</code>. Первичный ключ
     */
    public final TableField<TCalendarProductionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column <code>admin.t_calendar_production.year</code>. Год
     */
    public final TableField<TCalendarProductionRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "Год");

    /**
     * The column <code>admin.t_calendar_production.hour_work_count</code>.
     * Рабочее время (в часах)
     */
    public final TableField<TCalendarProductionRecord, BigDecimal> HOUR_WORK_COUNT = createField(DSL.name("hour_work_count"), SQLDataType.NUMERIC, this, "Рабочее время (в часах)");

    /**
     * The column
     * <code>admin.t_calendar_production.month_work_hour_count</code>.
     * Количество часов работы в месяц
     */
    public final TableField<TCalendarProductionRecord, BigDecimal> MONTH_WORK_HOUR_COUNT = createField(DSL.name("month_work_hour_count"), SQLDataType.NUMERIC, this, "Количество часов работы в месяц");

    /**
     * The column <code>admin.t_calendar_production.create_date</code>. Дата
     * создания
     */
    public final TableField<TCalendarProductionRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата создания");

    /**
     * The column <code>admin.t_calendar_production.create_user</code>. Автор
     * создания
     */
    public final TableField<TCalendarProductionRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_calendar_production.last_update_date</code>.
     * Дата и время изменения
     */
    public final TableField<TCalendarProductionRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_calendar_production.last_update_user</code>.
     * Автор изменения
     */
    public final TableField<TCalendarProductionRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TCalendarProduction(Name alias, Table<TCalendarProductionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCalendarProduction(Name alias, Table<TCalendarProductionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Производственный календарь"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_calendar_production</code> table
     * reference
     */
    public TCalendarProduction(String alias) {
        this(DSL.name(alias), T_CALENDAR_PRODUCTION);
    }

    /**
     * Create an aliased <code>admin.t_calendar_production</code> table
     * reference
     */
    public TCalendarProduction(Name alias) {
        this(alias, T_CALENDAR_PRODUCTION);
    }

    /**
     * Create a <code>admin.t_calendar_production</code> table reference
     */
    public TCalendarProduction() {
        this(DSL.name("t_calendar_production"), null);
    }

    public <O extends Record> TCalendarProduction(Table<O> child, ForeignKey<O, TCalendarProductionRecord> key) {
        super(child, key, T_CALENDAR_PRODUCTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TCalendarProductionRecord> getPrimaryKey() {
        return Keys.T_CALENDAR_PRODUCTION_PK;
    }

    @Override
    public List<UniqueKey<TCalendarProductionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.T_CALENDAR_PRODUCTION_UN);
    }

    @Override
    public TCalendarProduction as(String alias) {
        return new TCalendarProduction(DSL.name(alias), this);
    }

    @Override
    public TCalendarProduction as(Name alias) {
        return new TCalendarProduction(alias, this);
    }

    @Override
    public TCalendarProduction as(Table<?> alias) {
        return new TCalendarProduction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalendarProduction rename(String name) {
        return new TCalendarProduction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalendarProduction rename(Name name) {
        return new TCalendarProduction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalendarProduction rename(Table<?> name) {
        return new TCalendarProduction(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, BigDecimal, BigDecimal, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

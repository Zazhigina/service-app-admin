/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TCostRangeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Диапазоны стоимостных показателей
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TCostRange extends TableImpl<TCostRangeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_cost_range</code>
     */
    public static final TCostRange T_COST_RANGE = new TCostRange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCostRangeRecord> getRecordType() {
        return TCostRangeRecord.class;
    }

    /**
     * The column <code>admin.t_cost_range.id</code>. ID
     */
    public final TableField<TCostRangeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "ID");

    /**
     * The column <code>admin.t_cost_range.lower_bound</code>. Нижняя граница
     */
    public final TableField<TCostRangeRecord, BigDecimal> LOWER_BOUND = createField(DSL.name("lower_bound"), SQLDataType.NUMERIC.nullable(false), this, "Нижняя граница");

    /**
     * The column <code>admin.t_cost_range.upper_bound</code>. Верхняя граница
     */
    public final TableField<TCostRangeRecord, BigDecimal> UPPER_BOUND = createField(DSL.name("upper_bound"), SQLDataType.NUMERIC.nullable(false), this, "Верхняя граница");

    /**
     * The column <code>admin.t_cost_range.interval_step</code>. Шаг Интервала 
     */
    public final TableField<TCostRangeRecord, BigDecimal> INTERVAL_STEP = createField(DSL.name("interval_step"), SQLDataType.NUMERIC.nullable(false), this, "Шаг Интервала ");

    /**
     * The column <code>admin.t_cost_range.range_text</code>. Текст диапазона
     */
    public final TableField<TCostRangeRecord, String> RANGE_TEXT = createField(DSL.name("range_text"), SQLDataType.VARCHAR.nullable(false), this, "Текст диапазона");

    /**
     * The column <code>admin.t_cost_range.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TCostRangeRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_cost_range.create_user</code>. Автор создания
     */
    public final TableField<TCostRangeRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_cost_range.last_update_date</code>. Дата и время
     * изменения
     */
    public final TableField<TCostRangeRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_cost_range.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TCostRangeRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TCostRange(Name alias, Table<TCostRangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCostRange(Name alias, Table<TCostRangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Диапазоны стоимостных показателей"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_cost_range</code> table reference
     */
    public TCostRange(String alias) {
        this(DSL.name(alias), T_COST_RANGE);
    }

    /**
     * Create an aliased <code>admin.t_cost_range</code> table reference
     */
    public TCostRange(Name alias) {
        this(alias, T_COST_RANGE);
    }

    /**
     * Create a <code>admin.t_cost_range</code> table reference
     */
    public TCostRange() {
        this(DSL.name("t_cost_range"), null);
    }

    public <O extends Record> TCostRange(Table<O> child, ForeignKey<O, TCostRangeRecord> key) {
        super(child, key, T_COST_RANGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TCostRangeRecord> getPrimaryKey() {
        return Keys.T_COST_RANGE_PK;
    }

    @Override
    public TCostRange as(String alias) {
        return new TCostRange(DSL.name(alias), this);
    }

    @Override
    public TCostRange as(Name alias) {
        return new TCostRange(alias, this);
    }

    @Override
    public TCostRange as(Table<?> alias) {
        return new TCostRange(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCostRange rename(String name) {
        return new TCostRange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCostRange rename(Name name) {
        return new TCostRange(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCostRange rename(Table<?> name) {
        return new TCostRange(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, BigDecimal, BigDecimal, BigDecimal, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import jooqdata.Admin;
import jooqdata.Indexes;
import jooqdata.Keys;
import jooqdata.tables.records.TExternalSourceRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * Системы-источники
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExternalSource extends TableImpl<TExternalSourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_external_source</code>
     */
    public static final TExternalSource T_EXTERNAL_SOURCE = new TExternalSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TExternalSourceRecord> getRecordType() {
        return TExternalSourceRecord.class;
    }

    /**
     * The column <code>admin.t_external_source.id</code>. ID
     */
    public final TableField<TExternalSourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "ID");

    /**
     * The column <code>admin.t_external_source.code</code>. Код
     */
    public final TableField<TExternalSourceRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR, this, "Код");

    /**
     * The column <code>admin.t_external_source.name</code>. Наименование
     */
    public final TableField<TExternalSourceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "Наименование");

    /**
     * The column <code>admin.t_external_source.description</code>. Описание
     */
    public final TableField<TExternalSourceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "Описание");

    /**
     * The column <code>admin.t_external_source.deleted</code>. Признак удаления
     */
    public final TableField<TExternalSourceRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN, this, "Признак удаления");

    /**
     * The column <code>admin.t_external_source.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TExternalSourceRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_external_source.create_user</code>. Автор
     * создания
     */
    public final TableField<TExternalSourceRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_external_source.last_update_date</code>. Дата и
     * время изменения
     */
    public final TableField<TExternalSourceRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_external_source.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TExternalSourceRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TExternalSource(Name alias, Table<TExternalSourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private TExternalSource(Name alias, Table<TExternalSourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Системы-источники"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_external_source</code> table reference
     */
    public TExternalSource(String alias) {
        this(DSL.name(alias), T_EXTERNAL_SOURCE);
    }

    /**
     * Create an aliased <code>admin.t_external_source</code> table reference
     */
    public TExternalSource(Name alias) {
        this(alias, T_EXTERNAL_SOURCE);
    }

    /**
     * Create a <code>admin.t_external_source</code> table reference
     */
    public TExternalSource() {
        this(DSL.name("t_external_source"), null);
    }

    public <O extends Record> TExternalSource(Table<O> child, ForeignKey<O, TExternalSourceRecord> key) {
        super(child, key, T_EXTERNAL_SOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.T_EXTERNAL_SOURCE_CODE_IDX);
    }

    @Override
    public UniqueKey<TExternalSourceRecord> getPrimaryKey() {
        return Keys.T_EXTERNAL_SOURCE_PK;
    }

    @Override
    public TExternalSource as(String alias) {
        return new TExternalSource(DSL.name(alias), this);
    }

    @Override
    public TExternalSource as(Name alias) {
        return new TExternalSource(alias, this);
    }

    @Override
    public TExternalSource as(Table<?> alias) {
        return new TExternalSource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TExternalSource rename(String name) {
        return new TExternalSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TExternalSource rename(Name name) {
        return new TExternalSource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TExternalSource rename(Table<?> name) {
        return new TExternalSource(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, Boolean, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TFaqAnswerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * FAQ: ответ на вопрос
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TFaqAnswer extends TableImpl<TFaqAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_faq_answer</code>
     */
    public static final TFaqAnswer T_FAQ_ANSWER = new TFaqAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TFaqAnswerRecord> getRecordType() {
        return TFaqAnswerRecord.class;
    }

    /**
     * The column <code>admin.t_faq_answer.id</code>. Первичный ключ
     */
    public final TableField<TFaqAnswerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column <code>admin.t_faq_answer.question_id</code>. Идентификатор
     * вопроса
     */
    public final TableField<TFaqAnswerRecord, Long> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор вопроса");

    /**
     * The column <code>admin.t_faq_answer.name</code>. Наименование
     */
    public final TableField<TFaqAnswerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "Наименование");

    /**
     * The column <code>admin.t_faq_answer.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TFaqAnswerRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_faq_answer.create_user</code>. Автор создания
     */
    public final TableField<TFaqAnswerRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_faq_answer.last_update_date</code>. Дата и время
     * изменения
     */
    public final TableField<TFaqAnswerRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_faq_answer.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TFaqAnswerRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TFaqAnswer(Name alias, Table<TFaqAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TFaqAnswer(Name alias, Table<TFaqAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("FAQ: ответ на вопрос"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_faq_answer</code> table reference
     */
    public TFaqAnswer(String alias) {
        this(DSL.name(alias), T_FAQ_ANSWER);
    }

    /**
     * Create an aliased <code>admin.t_faq_answer</code> table reference
     */
    public TFaqAnswer(Name alias) {
        this(alias, T_FAQ_ANSWER);
    }

    /**
     * Create a <code>admin.t_faq_answer</code> table reference
     */
    public TFaqAnswer() {
        this(DSL.name("t_faq_answer"), null);
    }

    public <O extends Record> TFaqAnswer(Table<O> child, ForeignKey<O, TFaqAnswerRecord> key) {
        super(child, key, T_FAQ_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TFaqAnswerRecord> getPrimaryKey() {
        return Keys.T_FAQ_ANSWER_PK;
    }

    @Override
    public List<ForeignKey<TFaqAnswerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.T_FAQ_ANSWER__T_FAQ_ANSWER_FK);
    }

    private transient TFaqQuestion _tFaqQuestion;

    /**
     * Get the implicit join path to the <code>admin.t_faq_question</code>
     * table.
     */
    public TFaqQuestion tFaqQuestion() {
        if (_tFaqQuestion == null)
            _tFaqQuestion = new TFaqQuestion(this, Keys.T_FAQ_ANSWER__T_FAQ_ANSWER_FK);

        return _tFaqQuestion;
    }

    @Override
    public TFaqAnswer as(String alias) {
        return new TFaqAnswer(DSL.name(alias), this);
    }

    @Override
    public TFaqAnswer as(Name alias) {
        return new TFaqAnswer(alias, this);
    }

    @Override
    public TFaqAnswer as(Table<?> alias) {
        return new TFaqAnswer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TFaqAnswer rename(String name) {
        return new TFaqAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFaqAnswer rename(Name name) {
        return new TFaqAnswer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFaqAnswer rename(Table<?> name) {
        return new TFaqAnswer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

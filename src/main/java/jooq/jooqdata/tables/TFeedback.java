/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TFeedbackRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Обратная связь
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TFeedback extends TableImpl<TFeedbackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_feedback</code>
     */
    public static final TFeedback T_FEEDBACK = new TFeedback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TFeedbackRecord> getRecordType() {
        return TFeedbackRecord.class;
    }

    /**
     * The column <code>admin.t_feedback.id</code>. ID
     */
    public final TableField<TFeedbackRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "ID");

    /**
     * The column <code>admin.t_feedback.fb_theme_name</code>. Имя темы
     */
    public final TableField<TFeedbackRecord, String> FB_THEME_NAME = createField(DSL.name("fb_theme_name"), SQLDataType.VARCHAR(255).nullable(false), this, "Имя темы");

    /**
     * The column <code>admin.t_feedback.feedback_text</code>. Текст обращения
     */
    public final TableField<TFeedbackRecord, String> FEEDBACK_TEXT = createField(DSL.name("feedback_text"), SQLDataType.CLOB, this, "Текст обращения");

    /**
     * The column <code>admin.t_feedback.create_date</code>. Дата создания
     * обращения
     */
    public final TableField<TFeedbackRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "Дата создания обращения");

    /**
     * The column <code>admin.t_feedback.create_user</code>. Автор обращения
     */
    public final TableField<TFeedbackRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор обращения");

    /**
     * The column <code>admin.t_feedback.last_update_date</code>. Дата и время
     * изменения
     */
    public final TableField<TFeedbackRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_feedback.user_fullname</code>. ФИО инициатора
     */
    public final TableField<TFeedbackRecord, String> USER_FULLNAME = createField(DSL.name("user_fullname"), SQLDataType.VARCHAR(1024), this, "ФИО инициатора");

    /**
     * The column <code>admin.t_feedback.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TFeedbackRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TFeedback(Name alias, Table<TFeedbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private TFeedback(Name alias, Table<TFeedbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Обратная связь"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_feedback</code> table reference
     */
    public TFeedback(String alias) {
        this(DSL.name(alias), T_FEEDBACK);
    }

    /**
     * Create an aliased <code>admin.t_feedback</code> table reference
     */
    public TFeedback(Name alias) {
        this(alias, T_FEEDBACK);
    }

    /**
     * Create a <code>admin.t_feedback</code> table reference
     */
    public TFeedback() {
        this(DSL.name("t_feedback"), null);
    }

    public <O extends Record> TFeedback(Table<O> child, ForeignKey<O, TFeedbackRecord> key) {
        super(child, key, T_FEEDBACK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TFeedbackRecord> getPrimaryKey() {
        return Keys.T_FEEDBACK_THEMES_PKEY;
    }

    @Override
    public TFeedback as(String alias) {
        return new TFeedback(DSL.name(alias), this);
    }

    @Override
    public TFeedback as(Name alias) {
        return new TFeedback(alias, this);
    }

    @Override
    public TFeedback as(Table<?> alias) {
        return new TFeedback(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedback rename(String name) {
        return new TFeedback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedback rename(Name name) {
        return new TFeedback(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedback rename(Table<?> name) {
        return new TFeedback(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, LocalDateTime, String, LocalDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

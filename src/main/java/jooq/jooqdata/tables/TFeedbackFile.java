/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TFeedbackFileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Файлы обратной связи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TFeedbackFile extends TableImpl<TFeedbackFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_feedback_file</code>
     */
    public static final TFeedbackFile T_FEEDBACK_FILE = new TFeedbackFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TFeedbackFileRecord> getRecordType() {
        return TFeedbackFileRecord.class;
    }

    /**
     * The column <code>admin.t_feedback_file.uid</code>. UID
     */
    public final TableField<TFeedbackFileRecord, UUID> UID = createField(DSL.name("uid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "UID");

    /**
     * The column <code>admin.t_feedback_file.feedback_id</code>. ID обращения
     */
    public final TableField<TFeedbackFileRecord, Long> FEEDBACK_ID = createField(DSL.name("feedback_id"), SQLDataType.BIGINT.nullable(false), this, "ID обращения");

    /**
     * The column <code>admin.t_feedback_file.document_id</code>. ID документа в
     * сервисе документов
     */
    public final TableField<TFeedbackFileRecord, Long> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.BIGINT.nullable(false), this, "ID документа в сервисе документов");

    /**
     * The column <code>admin.t_feedback_file.filename</code>. Название файла
     */
    public final TableField<TFeedbackFileRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.CLOB.nullable(false), this, "Название файла");

    /**
     * The column <code>admin.t_feedback_file.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TFeedbackFileRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_feedback_file.create_user</code>. Автор создания
     */
    public final TableField<TFeedbackFileRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_feedback_file.last_update_date</code>. Дата и
     * время изменения
     */
    public final TableField<TFeedbackFileRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_feedback_file.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TFeedbackFileRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TFeedbackFile(Name alias, Table<TFeedbackFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private TFeedbackFile(Name alias, Table<TFeedbackFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Файлы обратной связи"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_feedback_file</code> table reference
     */
    public TFeedbackFile(String alias) {
        this(DSL.name(alias), T_FEEDBACK_FILE);
    }

    /**
     * Create an aliased <code>admin.t_feedback_file</code> table reference
     */
    public TFeedbackFile(Name alias) {
        this(alias, T_FEEDBACK_FILE);
    }

    /**
     * Create a <code>admin.t_feedback_file</code> table reference
     */
    public TFeedbackFile() {
        this(DSL.name("t_feedback_file"), null);
    }

    public <O extends Record> TFeedbackFile(Table<O> child, ForeignKey<O, TFeedbackFileRecord> key) {
        super(child, key, T_FEEDBACK_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TFeedbackFileRecord> getPrimaryKey() {
        return Keys.T_FEEDBACK_FILE_PKEY;
    }

    @Override
    public TFeedbackFile as(String alias) {
        return new TFeedbackFile(DSL.name(alias), this);
    }

    @Override
    public TFeedbackFile as(Name alias) {
        return new TFeedbackFile(alias, this);
    }

    @Override
    public TFeedbackFile as(Table<?> alias) {
        return new TFeedbackFile(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackFile rename(String name) {
        return new TFeedbackFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackFile rename(Name name) {
        return new TFeedbackFile(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackFile rename(Table<?> name) {
        return new TFeedbackFile(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, Long, Long, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TFeedbackFileStoreRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Таблица для хранения вложений ОС
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TFeedbackFileStore extends TableImpl<TFeedbackFileStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_feedback_file_store</code>
     */
    public static final TFeedbackFileStore T_FEEDBACK_FILE_STORE = new TFeedbackFileStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TFeedbackFileStoreRecord> getRecordType() {
        return TFeedbackFileStoreRecord.class;
    }

    /**
     * The column <code>admin.t_feedback_file_store.id</code>. ID
     */
    public final TableField<TFeedbackFileStoreRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.INTEGER)), this, "ID");

    /**
     * The column <code>admin.t_feedback_file_store.create_date</code>. Дата
     * создания
     */
    public final TableField<TFeedbackFileStoreRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "Дата создания");

    /**
     * The column <code>admin.t_feedback_file_store.create_user</code>.
     * Создатель
     */
    public final TableField<TFeedbackFileStoreRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Создатель");

    /**
     * The column <code>admin.t_feedback_file_store.file_extension</code>.
     * Расширение
     */
    public final TableField<TFeedbackFileStoreRecord, String> FILE_EXTENSION = createField(DSL.name("file_extension"), SQLDataType.VARCHAR(100), this, "Расширение");

    /**
     * The column <code>admin.t_feedback_file_store.file_name</code>. Название
     * файла
     */
    public final TableField<TFeedbackFileStoreRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.VARCHAR(3000), this, "Название файла");

    /**
     * The column <code>admin.t_feedback_file_store.file_size</code>. Размер
     * файла
     */
    public final TableField<TFeedbackFileStoreRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT, this, "Размер файла");

    /**
     * The column <code>admin.t_feedback_file_store.last_update_date</code>.
     * Последнее обновление
     */
    public final TableField<TFeedbackFileStoreRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Последнее обновление");

    /**
     * The column <code>admin.t_feedback_file_store.feedback_id</code>.
     */
    public final TableField<TFeedbackFileStoreRecord, Integer> FEEDBACK_ID = createField(DSL.name("feedback_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>admin.t_feedback_file_store.file_blob</code>. Файл
     */
    public final TableField<TFeedbackFileStoreRecord, byte[]> FILE_BLOB = createField(DSL.name("file_blob"), SQLDataType.BLOB, this, "Файл");

    /**
     * The column <code>admin.t_feedback_file_store.UID</code>. GUID для файла
     */
    public final TableField<TFeedbackFileStoreRecord, UUID> UID = createField(DSL.name("UID"), SQLDataType.UUID.defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "GUID для файла");

    private TFeedbackFileStore(Name alias, Table<TFeedbackFileStoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private TFeedbackFileStore(Name alias, Table<TFeedbackFileStoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица для хранения вложений ОС"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_feedback_file_store</code> table
     * reference
     */
    public TFeedbackFileStore(String alias) {
        this(DSL.name(alias), T_FEEDBACK_FILE_STORE);
    }

    /**
     * Create an aliased <code>admin.t_feedback_file_store</code> table
     * reference
     */
    public TFeedbackFileStore(Name alias) {
        this(alias, T_FEEDBACK_FILE_STORE);
    }

    /**
     * Create a <code>admin.t_feedback_file_store</code> table reference
     */
    public TFeedbackFileStore() {
        this(DSL.name("t_feedback_file_store"), null);
    }

    public <O extends Record> TFeedbackFileStore(Table<O> child, ForeignKey<O, TFeedbackFileStoreRecord> key) {
        super(child, key, T_FEEDBACK_FILE_STORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TFeedbackFileStoreRecord> getPrimaryKey() {
        return Keys.T_FEEDBACK_FILE_STORE_PKEY;
    }

    @Override
    public List<ForeignKey<TFeedbackFileStoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.T_FEEDBACK_FILE_STORE__FK_FEEDBACK_FKEY);
    }

    private transient TFeedback _tFeedback;

    /**
     * Get the implicit join path to the <code>admin.t_feedback</code> table.
     */
    public TFeedback tFeedback() {
        if (_tFeedback == null)
            _tFeedback = new TFeedback(this, Keys.T_FEEDBACK_FILE_STORE__FK_FEEDBACK_FKEY);

        return _tFeedback;
    }

    @Override
    public TFeedbackFileStore as(String alias) {
        return new TFeedbackFileStore(DSL.name(alias), this);
    }

    @Override
    public TFeedbackFileStore as(Name alias) {
        return new TFeedbackFileStore(alias, this);
    }

    @Override
    public TFeedbackFileStore as(Table<?> alias) {
        return new TFeedbackFileStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackFileStore rename(String name) {
        return new TFeedbackFileStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackFileStore rename(Name name) {
        return new TFeedbackFileStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackFileStore rename(Table<?> name) {
        return new TFeedbackFileStore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, LocalDateTime, String, String, String, Long, LocalDateTime, Integer, byte[], UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Integer, ? super byte[], ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Integer, ? super byte[], ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

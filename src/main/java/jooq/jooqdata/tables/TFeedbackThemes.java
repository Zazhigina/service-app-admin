/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.tables.records.TFeedbackThemesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Справочник тем для обратной связи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TFeedbackThemes extends TableImpl<TFeedbackThemesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_feedback_themes</code>
     */
    public static final TFeedbackThemes T_FEEDBACK_THEMES = new TFeedbackThemes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TFeedbackThemesRecord> getRecordType() {
        return TFeedbackThemesRecord.class;
    }

    /**
     * The column <code>admin.t_feedback_themes.id</code>. ID
     */
    public final TableField<TFeedbackThemesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.INTEGER)), this, "ID");

    /**
     * The column <code>admin.t_feedback_themes.fb_theme_name</code>. Имя темы
     */
    public final TableField<TFeedbackThemesRecord, String> FB_THEME_NAME = createField(DSL.name("fb_theme_name"), SQLDataType.VARCHAR(255).nullable(false), this, "Имя темы");

    /**
     * The column <code>admin.t_feedback_themes.create_date</code>. Дата
     * создания темы
     */
    public final TableField<TFeedbackThemesRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата создания темы");

    /**
     * The column <code>admin.t_feedback_themes.last_update_date</code>. Дата
     * изменения темы
     */
    public final TableField<TFeedbackThemesRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата изменения темы");

    /**
     * The column <code>admin.t_feedback_themes.create_user</code>. Автор
     * создавший тему
     */
    public final TableField<TFeedbackThemesRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создавший тему");

    /**
     * The column <code>admin.t_feedback_themes.unique_id</code>. GUID для темы
     */
    public final TableField<TFeedbackThemesRecord, UUID> UNIQUE_ID = createField(DSL.name("unique_id"), SQLDataType.UUID.defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "GUID для темы");

    private TFeedbackThemes(Name alias, Table<TFeedbackThemesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TFeedbackThemes(Name alias, Table<TFeedbackThemesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Справочник тем для обратной связи"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_feedback_themes</code> table reference
     */
    public TFeedbackThemes(String alias) {
        this(DSL.name(alias), T_FEEDBACK_THEMES);
    }

    /**
     * Create an aliased <code>admin.t_feedback_themes</code> table reference
     */
    public TFeedbackThemes(Name alias) {
        this(alias, T_FEEDBACK_THEMES);
    }

    /**
     * Create a <code>admin.t_feedback_themes</code> table reference
     */
    public TFeedbackThemes() {
        this(DSL.name("t_feedback_themes"), null);
    }

    public <O extends Record> TFeedbackThemes(Table<O> child, ForeignKey<O, TFeedbackThemesRecord> key) {
        super(child, key, T_FEEDBACK_THEMES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public TFeedbackThemes as(String alias) {
        return new TFeedbackThemes(DSL.name(alias), this);
    }

    @Override
    public TFeedbackThemes as(Name alias) {
        return new TFeedbackThemes(alias, this);
    }

    @Override
    public TFeedbackThemes as(Table<?> alias) {
        return new TFeedbackThemes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackThemes rename(String name) {
        return new TFeedbackThemes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackThemes rename(Name name) {
        return new TFeedbackThemes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFeedbackThemes rename(Table<?> name) {
        return new TFeedbackThemes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, LocalDateTime, LocalDateTime, String, UUID> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

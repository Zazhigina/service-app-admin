/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TLetterTemplateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Шаблон письма
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TLetterTemplate extends TableImpl<TLetterTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_letter_template</code>
     */
    public static final TLetterTemplate T_LETTER_TEMPLATE = new TLetterTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TLetterTemplateRecord> getRecordType() {
        return TLetterTemplateRecord.class;
    }

    /**
     * The column <code>admin.t_letter_template.id</code>. ID
     */
    public final TableField<TLetterTemplateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "ID");

    /**
     * The column <code>admin.t_letter_template.letter_type</code>. Параметр имя
     */
    public final TableField<TLetterTemplateRecord, String> LETTER_TYPE = createField(DSL.name("letter_type"), SQLDataType.VARCHAR.nullable(false), this, "Параметр имя");

    /**
     * The column <code>admin.t_letter_template.title</code>. Заголовок
     */
    public final TableField<TLetterTemplateRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR, this, "Заголовок");

    /**
     * The column <code>admin.t_letter_template.letter_sample</code>. Документ
     */
    public final TableField<TLetterTemplateRecord, Long> LETTER_SAMPLE = createField(DSL.name("letter_sample"), SQLDataType.BIGINT, this, "Документ");

    /**
     * The column <code>admin.t_letter_template.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TLetterTemplateRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_letter_template.create_user</code>. Автор
     * создания
     */
    public final TableField<TLetterTemplateRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_letter_template.last_update_date</code>. Дата и
     * время изменения
     */
    public final TableField<TLetterTemplateRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_letter_template.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TLetterTemplateRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    /**
     * The column <code>admin.t_letter_template.type_template</code>. Вид
     * шаблона. Enum: Документ, Шаблон
     */
    public final TableField<TLetterTemplateRecord, String> TYPE_TEMPLATE = createField(DSL.name("type_template"), SQLDataType.VARCHAR.nullable(false), this, "Вид шаблона. Enum: Документ, Шаблон");

    /**
     * The column
     * <code>admin.t_letter_template.acceptable_document_format</code>.
     * Допустимый формат документа. Enum: doc, docx, html
     */
    public final TableField<TLetterTemplateRecord, String> ACCEPTABLE_DOCUMENT_FORMAT = createField(DSL.name("acceptable_document_format"), SQLDataType.VARCHAR, this, "Допустимый формат документа. Enum: doc, docx, html");

    /**
     * The column <code>admin.t_letter_template.status</code>. Статус
     */
    public final TableField<TLetterTemplateRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'DRAFT'::character varying", SQLDataType.VARCHAR)), this, "Статус");

    private TLetterTemplate(Name alias, Table<TLetterTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TLetterTemplate(Name alias, Table<TLetterTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Шаблон письма"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_letter_template</code> table reference
     */
    public TLetterTemplate(String alias) {
        this(DSL.name(alias), T_LETTER_TEMPLATE);
    }

    /**
     * Create an aliased <code>admin.t_letter_template</code> table reference
     */
    public TLetterTemplate(Name alias) {
        this(alias, T_LETTER_TEMPLATE);
    }

    /**
     * Create a <code>admin.t_letter_template</code> table reference
     */
    public TLetterTemplate() {
        this(DSL.name("t_letter_template"), null);
    }

    public <O extends Record> TLetterTemplate(Table<O> child, ForeignKey<O, TLetterTemplateRecord> key) {
        super(child, key, T_LETTER_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TLetterTemplateRecord> getPrimaryKey() {
        return Keys.T_LETTER_TEMPLATE_PK;
    }

    @Override
    public List<UniqueKey<TLetterTemplateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.T_LETTER_TEMPLATE_UN);
    }

    @Override
    public List<ForeignKey<TLetterTemplateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.T_LETTER_TEMPLATE__T_LETTER_TEMPLATE_FK_1, Keys.T_LETTER_TEMPLATE__T_LETTER_TEMPLATE_FK_2);
    }

    private transient TLetterTemplateTypeTemplateEnum _tLetterTemplateTypeTemplateEnum;
    private transient TLetterTemplateAcceptableDocumentFormatEnum _tLetterTemplateAcceptableDocumentFormatEnum;

    /**
     * Get the implicit join path to the
     * <code>admin.t_letter_template_type_template_enum</code> table.
     */
    public TLetterTemplateTypeTemplateEnum tLetterTemplateTypeTemplateEnum() {
        if (_tLetterTemplateTypeTemplateEnum == null)
            _tLetterTemplateTypeTemplateEnum = new TLetterTemplateTypeTemplateEnum(this, Keys.T_LETTER_TEMPLATE__T_LETTER_TEMPLATE_FK_1);

        return _tLetterTemplateTypeTemplateEnum;
    }

    /**
     * Get the implicit join path to the
     * <code>admin.t_letter_template_acceptable_document_format_enum</code>
     * table.
     */
    public TLetterTemplateAcceptableDocumentFormatEnum tLetterTemplateAcceptableDocumentFormatEnum() {
        if (_tLetterTemplateAcceptableDocumentFormatEnum == null)
            _tLetterTemplateAcceptableDocumentFormatEnum = new TLetterTemplateAcceptableDocumentFormatEnum(this, Keys.T_LETTER_TEMPLATE__T_LETTER_TEMPLATE_FK_2);

        return _tLetterTemplateAcceptableDocumentFormatEnum;
    }

    @Override
    public TLetterTemplate as(String alias) {
        return new TLetterTemplate(DSL.name(alias), this);
    }

    @Override
    public TLetterTemplate as(Name alias) {
        return new TLetterTemplate(alias, this);
    }

    @Override
    public TLetterTemplate as(Table<?> alias) {
        return new TLetterTemplate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplate rename(String name) {
        return new TLetterTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplate rename(Name name) {
        return new TLetterTemplate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplate rename(Table<?> name) {
        return new TLetterTemplate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, Long, LocalDateTime, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TLetterTemplateAcceptableDocumentFormatEnumRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Допустимый формат документа (Enum)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TLetterTemplateAcceptableDocumentFormatEnum extends TableImpl<TLetterTemplateAcceptableDocumentFormatEnumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>admin.t_letter_template_acceptable_document_format_enum</code>
     */
    public static final TLetterTemplateAcceptableDocumentFormatEnum T_LETTER_TEMPLATE_ACCEPTABLE_DOCUMENT_FORMAT_ENUM = new TLetterTemplateAcceptableDocumentFormatEnum();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TLetterTemplateAcceptableDocumentFormatEnumRecord> getRecordType() {
        return TLetterTemplateAcceptableDocumentFormatEnumRecord.class;
    }

    /**
     * The column
     * <code>admin.t_letter_template_acceptable_document_format_enum.id</code>.
     * ID
     */
    public final TableField<TLetterTemplateAcceptableDocumentFormatEnumRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "ID");

    /**
     * The column
     * <code>admin.t_letter_template_acceptable_document_format_enum.name</code>.
     * Наименование
     */
    public final TableField<TLetterTemplateAcceptableDocumentFormatEnumRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "Наименование");

    /**
     * The column
     * <code>admin.t_letter_template_acceptable_document_format_enum.description</code>.
     * Описание
     */
    public final TableField<TLetterTemplateAcceptableDocumentFormatEnumRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "Описание");

    private TLetterTemplateAcceptableDocumentFormatEnum(Name alias, Table<TLetterTemplateAcceptableDocumentFormatEnumRecord> aliased) {
        this(alias, aliased, null);
    }

    private TLetterTemplateAcceptableDocumentFormatEnum(Name alias, Table<TLetterTemplateAcceptableDocumentFormatEnumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Допустимый формат документа (Enum)"), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>admin.t_letter_template_acceptable_document_format_enum</code>
     * table reference
     */
    public TLetterTemplateAcceptableDocumentFormatEnum(String alias) {
        this(DSL.name(alias), T_LETTER_TEMPLATE_ACCEPTABLE_DOCUMENT_FORMAT_ENUM);
    }

    /**
     * Create an aliased
     * <code>admin.t_letter_template_acceptable_document_format_enum</code>
     * table reference
     */
    public TLetterTemplateAcceptableDocumentFormatEnum(Name alias) {
        this(alias, T_LETTER_TEMPLATE_ACCEPTABLE_DOCUMENT_FORMAT_ENUM);
    }

    /**
     * Create a
     * <code>admin.t_letter_template_acceptable_document_format_enum</code>
     * table reference
     */
    public TLetterTemplateAcceptableDocumentFormatEnum() {
        this(DSL.name("t_letter_template_acceptable_document_format_enum"), null);
    }

    public <O extends Record> TLetterTemplateAcceptableDocumentFormatEnum(Table<O> child, ForeignKey<O, TLetterTemplateAcceptableDocumentFormatEnumRecord> key) {
        super(child, key, T_LETTER_TEMPLATE_ACCEPTABLE_DOCUMENT_FORMAT_ENUM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TLetterTemplateAcceptableDocumentFormatEnumRecord> getPrimaryKey() {
        return Keys.T_LETTER_TEMPLATE_ACCEPTABLE_DOCUMENT_FORMAT_ENUM_PK;
    }

    @Override
    public List<UniqueKey<TLetterTemplateAcceptableDocumentFormatEnumRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.T_LETTER_TEMPLATE_ACCEPTABLE_DOCUMENT_FORMAT_ENUM_UN);
    }

    @Override
    public TLetterTemplateAcceptableDocumentFormatEnum as(String alias) {
        return new TLetterTemplateAcceptableDocumentFormatEnum(DSL.name(alias), this);
    }

    @Override
    public TLetterTemplateAcceptableDocumentFormatEnum as(Name alias) {
        return new TLetterTemplateAcceptableDocumentFormatEnum(alias, this);
    }

    @Override
    public TLetterTemplateAcceptableDocumentFormatEnum as(Table<?> alias) {
        return new TLetterTemplateAcceptableDocumentFormatEnum(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplateAcceptableDocumentFormatEnum rename(String name) {
        return new TLetterTemplateAcceptableDocumentFormatEnum(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplateAcceptableDocumentFormatEnum rename(Name name) {
        return new TLetterTemplateAcceptableDocumentFormatEnum(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplateAcceptableDocumentFormatEnum rename(Table<?> name) {
        return new TLetterTemplateAcceptableDocumentFormatEnum(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

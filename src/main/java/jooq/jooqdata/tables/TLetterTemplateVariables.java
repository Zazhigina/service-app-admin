/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TLetterTemplateVariablesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Переменные к шаблону письма
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TLetterTemplateVariables extends TableImpl<TLetterTemplateVariablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_letter_template_variables</code>
     */
    public static final TLetterTemplateVariables T_LETTER_TEMPLATE_VARIABLES = new TLetterTemplateVariables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TLetterTemplateVariablesRecord> getRecordType() {
        return TLetterTemplateVariablesRecord.class;
    }

    /**
     * The column <code>admin.t_letter_template_variables.id</code>. Первичный
     * ключ
     */
    public final TableField<TLetterTemplateVariablesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column
     * <code>admin.t_letter_template_variables.letter_template_id</code>. Шаблон
     * письма
     */
    public final TableField<TLetterTemplateVariablesRecord, Long> LETTER_TEMPLATE_ID = createField(DSL.name("letter_template_id"), SQLDataType.BIGINT.nullable(false), this, "Шаблон письма");

    /**
     * The column <code>admin.t_letter_template_variables.variable</code>.
     * Переменная
     */
    public final TableField<TLetterTemplateVariablesRecord, String> VARIABLE = createField(DSL.name("variable"), SQLDataType.VARCHAR, this, "Переменная");

    /**
     * The column <code>admin.t_letter_template_variables.variable_name</code>.
     * Наименование переменной
     */
    public final TableField<TLetterTemplateVariablesRecord, String> VARIABLE_NAME = createField(DSL.name("variable_name"), SQLDataType.VARCHAR, this, "Наименование переменной");

    /**
     * The column <code>admin.t_letter_template_variables.create_date</code>.
     * Дата и время создания
     */
    public final TableField<TLetterTemplateVariablesRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_letter_template_variables.create_user</code>.
     * Автор создания
     */
    public final TableField<TLetterTemplateVariablesRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column
     * <code>admin.t_letter_template_variables.last_update_date</code>. Дата и
     * время изменения
     */
    public final TableField<TLetterTemplateVariablesRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column
     * <code>admin.t_letter_template_variables.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TLetterTemplateVariablesRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TLetterTemplateVariables(Name alias, Table<TLetterTemplateVariablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TLetterTemplateVariables(Name alias, Table<TLetterTemplateVariablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Переменные к шаблону письма"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_letter_template_variables</code> table
     * reference
     */
    public TLetterTemplateVariables(String alias) {
        this(DSL.name(alias), T_LETTER_TEMPLATE_VARIABLES);
    }

    /**
     * Create an aliased <code>admin.t_letter_template_variables</code> table
     * reference
     */
    public TLetterTemplateVariables(Name alias) {
        this(alias, T_LETTER_TEMPLATE_VARIABLES);
    }

    /**
     * Create a <code>admin.t_letter_template_variables</code> table reference
     */
    public TLetterTemplateVariables() {
        this(DSL.name("t_letter_template_variables"), null);
    }

    public <O extends Record> TLetterTemplateVariables(Table<O> child, ForeignKey<O, TLetterTemplateVariablesRecord> key) {
        super(child, key, T_LETTER_TEMPLATE_VARIABLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TLetterTemplateVariablesRecord> getPrimaryKey() {
        return Keys.T_LETTER_TEMPLATE_VARIABLES_PK;
    }

    @Override
    public List<ForeignKey<TLetterTemplateVariablesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.T_LETTER_TEMPLATE_VARIABLES__T_LETTER_TEMPLATE_VARIABLES_FK);
    }

    private transient TLetterTemplate _tLetterTemplate;

    /**
     * Get the implicit join path to the <code>admin.t_letter_template</code>
     * table.
     */
    public TLetterTemplate tLetterTemplate() {
        if (_tLetterTemplate == null)
            _tLetterTemplate = new TLetterTemplate(this, Keys.T_LETTER_TEMPLATE_VARIABLES__T_LETTER_TEMPLATE_VARIABLES_FK);

        return _tLetterTemplate;
    }

    @Override
    public TLetterTemplateVariables as(String alias) {
        return new TLetterTemplateVariables(DSL.name(alias), this);
    }

    @Override
    public TLetterTemplateVariables as(Name alias) {
        return new TLetterTemplateVariables(alias, this);
    }

    @Override
    public TLetterTemplateVariables as(Table<?> alias) {
        return new TLetterTemplateVariables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplateVariables rename(String name) {
        return new TLetterTemplateVariables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplateVariables rename(Name name) {
        return new TLetterTemplateVariables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TLetterTemplateVariables rename(Table<?> name) {
        return new TLetterTemplateVariables(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TMatrixRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Настройка матрицы Компания организатор / Организатор &lt;&gt; Заказчик /
 * Инициатор"
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TMatrix extends TableImpl<TMatrixRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_matrix</code>
     */
    public static final TMatrix T_MATRIX = new TMatrix();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TMatrixRecord> getRecordType() {
        return TMatrixRecord.class;
    }

    /**
     * The column <code>admin.t_matrix.id</code>. Первичный ключ
     */
    public final TableField<TMatrixRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column <code>admin.t_matrix.company_code</code>. Код компании
     * организатора
     */
    public final TableField<TMatrixRecord, String> COMPANY_CODE = createField(DSL.name("company_code"), SQLDataType.VARCHAR(4).nullable(false), this, "Код компании организатора");

    /**
     * The column <code>admin.t_matrix.org_code</code>. Код организатора
     */
    public final TableField<TMatrixRecord, String> ORG_CODE = createField(DSL.name("org_code"), SQLDataType.VARCHAR(3).nullable(false), this, "Код организатора");

    /**
     * The column <code>admin.t_matrix.customer_code</code>. Код заказчика
     */
    public final TableField<TMatrixRecord, String> CUSTOMER_CODE = createField(DSL.name("customer_code"), SQLDataType.VARCHAR.nullable(false), this, "Код заказчика");

    /**
     * The column <code>admin.t_matrix.initiator_code</code>. Код инициатора
     */
    public final TableField<TMatrixRecord, String> INITIATOR_CODE = createField(DSL.name("initiator_code"), SQLDataType.VARCHAR.nullable(false), this, "Код инициатора");

    /**
     * The column <code>admin.t_matrix.create_date</code>. Дата и время создания
     */
    public final TableField<TMatrixRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_matrix.create_user</code>. Автор создания
     */
    public final TableField<TMatrixRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR, this, "Автор создания");

    /**
     * The column <code>admin.t_matrix.last_update_date</code>. Дата и время
     * изменения
     */
    public final TableField<TMatrixRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_matrix.last_update_user</code>. Автор изменения
     */
    public final TableField<TMatrixRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR, this, "Автор изменения");

    private TMatrix(Name alias, Table<TMatrixRecord> aliased) {
        this(alias, aliased, null);
    }

    private TMatrix(Name alias, Table<TMatrixRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Настройка матрицы Компания организатор / Организатор <> Заказчик / Инициатор\""), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_matrix</code> table reference
     */
    public TMatrix(String alias) {
        this(DSL.name(alias), T_MATRIX);
    }

    /**
     * Create an aliased <code>admin.t_matrix</code> table reference
     */
    public TMatrix(Name alias) {
        this(alias, T_MATRIX);
    }

    /**
     * Create a <code>admin.t_matrix</code> table reference
     */
    public TMatrix() {
        this(DSL.name("t_matrix"), null);
    }

    public <O extends Record> TMatrix(Table<O> child, ForeignKey<O, TMatrixRecord> key) {
        super(child, key, T_MATRIX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TMatrixRecord> getPrimaryKey() {
        return Keys.T_MATRIX_PKEY;
    }

    @Override
    public TMatrix as(String alias) {
        return new TMatrix(DSL.name(alias), this);
    }

    @Override
    public TMatrix as(Name alias) {
        return new TMatrix(alias, this);
    }

    @Override
    public TMatrix as(Table<?> alias) {
        return new TMatrix(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TMatrix rename(String name) {
        return new TMatrix(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMatrix rename(Name name) {
        return new TMatrix(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMatrix rename(Table<?> name) {
        return new TMatrix(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

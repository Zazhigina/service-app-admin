/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Keys;
import jooqdata.tables.records.TQuestionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Преднастроенный вопрос
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TQuestion extends TableImpl<TQuestionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_question</code>
     */
    public static final TQuestion T_QUESTION = new TQuestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TQuestionRecord> getRecordType() {
        return TQuestionRecord.class;
    }

    /**
     * The column <code>admin.t_question.id</code>. Первичный ключ
     */
    public final TableField<TQuestionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column <code>admin.t_question.name</code>. Наименование
     */
    public final TableField<TQuestionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "Наименование");

    /**
     * The column <code>admin.t_question.order_no</code>. Номер вопроса
     */
    public final TableField<TQuestionRecord, Integer> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.INTEGER, this, "Номер вопроса");

    /**
     * The column <code>admin.t_question.actual_to</code>. Срок действия
     */
    public final TableField<TQuestionRecord, LocalDateTime> ACTUAL_TO = createField(DSL.name("actual_to"), SQLDataType.LOCALDATETIME(6), this, "Срок действия");

    /**
     * The column <code>admin.t_question.create_date</code>. Дата и время
     * создания
     */
    public final TableField<TQuestionRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время создания");

    /**
     * The column <code>admin.t_question.create_user</code>. Автор создания
     */
    public final TableField<TQuestionRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_question.last_update_date</code>. Дата и время
     * изменения
     */
    public final TableField<TQuestionRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_question.last_update_user</code>. Автор
     * изменения
     */
    public final TableField<TQuestionRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    /**
     * The column <code>admin.t_question.code</code>. Уникальный код запроса
     */
    public final TableField<TQuestionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR.nullable(false), this, "Уникальный код запроса");

    /**
     * The column <code>admin.t_question.owner</code>. Владелец, enum
     */
    public final TableField<TQuestionRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(30), this, "Владелец, enum");

    /**
     * The column <code>admin.t_question.annex</code>. Приложение к ответу на
     * вопрос
     */
    public final TableField<TQuestionRecord, String> ANNEX = createField(DSL.name("annex"), SQLDataType.VARCHAR(15), this, "Приложение к ответу на вопрос");

    private TQuestion(Name alias, Table<TQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TQuestion(Name alias, Table<TQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Преднастроенный вопрос"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_question</code> table reference
     */
    public TQuestion(String alias) {
        this(DSL.name(alias), T_QUESTION);
    }

    /**
     * Create an aliased <code>admin.t_question</code> table reference
     */
    public TQuestion(Name alias) {
        this(alias, T_QUESTION);
    }

    /**
     * Create a <code>admin.t_question</code> table reference
     */
    public TQuestion() {
        this(DSL.name("t_question"), null);
    }

    public <O extends Record> TQuestion(Table<O> child, ForeignKey<O, TQuestionRecord> key) {
        super(child, key, T_QUESTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public UniqueKey<TQuestionRecord> getPrimaryKey() {
        return Keys.T_QUESTION_PK;
    }

    @Override
    public List<UniqueKey<TQuestionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.T_QUESTION_UN);
    }

    @Override
    public TQuestion as(String alias) {
        return new TQuestion(DSL.name(alias), this);
    }

    @Override
    public TQuestion as(Name alias) {
        return new TQuestion(alias, this);
    }

    @Override
    public TQuestion as(Table<?> alias) {
        return new TQuestion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TQuestion rename(String name) {
        return new TQuestion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TQuestion rename(Name name) {
        return new TQuestion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TQuestion rename(Table<?> name) {
        return new TQuestion(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, Integer, LocalDateTime, LocalDateTime, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

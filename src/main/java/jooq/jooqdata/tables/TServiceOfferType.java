/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooqdata.Admin;
import jooqdata.Indexes;
import jooqdata.Keys;
import jooqdata.tables.records.TServiceOfferTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Вид шаблона КП для услуги
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TServiceOfferType extends TableImpl<TServiceOfferTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>admin.t_service_offer_type</code>
     */
    public static final TServiceOfferType T_SERVICE_OFFER_TYPE = new TServiceOfferType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TServiceOfferTypeRecord> getRecordType() {
        return TServiceOfferTypeRecord.class;
    }

    /**
     * The column <code>admin.t_service_offer_type.id</code>. Первичный ключ
     */
    public final TableField<TServiceOfferTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("admin.get_id()", SQLDataType.BIGINT)), this, "Первичный ключ");

    /**
     * The column <code>admin.t_service_offer_type.service_code</code>. Код
     * услуги
     */
    public final TableField<TServiceOfferTypeRecord, String> SERVICE_CODE = createField(DSL.name("service_code"), SQLDataType.VARCHAR.nullable(false), this, "Код услуги");

    /**
     * The column <code>admin.t_service_offer_type.offer_type</code>. Вид
     * шаблона КП
     */
    public final TableField<TServiceOfferTypeRecord, String> OFFER_TYPE = createField(DSL.name("offer_type"), SQLDataType.VARCHAR, this, "Вид шаблона КП");

    /**
     * The column <code>admin.t_service_offer_type.create_date</code>. Дата
     * создания
     */
    public final TableField<TServiceOfferTypeRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6), this, "Дата создания");

    /**
     * The column <code>admin.t_service_offer_type.create_user</code>. Автор
     * создания
     */
    public final TableField<TServiceOfferTypeRecord, String> CREATE_USER = createField(DSL.name("create_user"), SQLDataType.VARCHAR(100), this, "Автор создания");

    /**
     * The column <code>admin.t_service_offer_type.last_update_date</code>. Дата
     * и время изменения
     */
    public final TableField<TServiceOfferTypeRecord, LocalDateTime> LAST_UPDATE_DATE = createField(DSL.name("last_update_date"), SQLDataType.LOCALDATETIME(6), this, "Дата и время изменения");

    /**
     * The column <code>admin.t_service_offer_type.last_update_user</code>.
     * Автор изменения
     */
    public final TableField<TServiceOfferTypeRecord, String> LAST_UPDATE_USER = createField(DSL.name("last_update_user"), SQLDataType.VARCHAR(100), this, "Автор изменения");

    private TServiceOfferType(Name alias, Table<TServiceOfferTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TServiceOfferType(Name alias, Table<TServiceOfferTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Вид шаблона КП для услуги"), TableOptions.table());
    }

    /**
     * Create an aliased <code>admin.t_service_offer_type</code> table reference
     */
    public TServiceOfferType(String alias) {
        this(DSL.name(alias), T_SERVICE_OFFER_TYPE);
    }

    /**
     * Create an aliased <code>admin.t_service_offer_type</code> table reference
     */
    public TServiceOfferType(Name alias) {
        this(alias, T_SERVICE_OFFER_TYPE);
    }

    /**
     * Create a <code>admin.t_service_offer_type</code> table reference
     */
    public TServiceOfferType() {
        this(DSL.name("t_service_offer_type"), null);
    }

    public <O extends Record> TServiceOfferType(Table<O> child, ForeignKey<O, TServiceOfferTypeRecord> key) {
        super(child, key, T_SERVICE_OFFER_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Admin.ADMIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.T_SERVICE_OFFER_TYPE_SERVICE_CODE_IDX);
    }

    @Override
    public UniqueKey<TServiceOfferTypeRecord> getPrimaryKey() {
        return Keys.T_SERVICE_OFFER_TYPE_PK;
    }

    @Override
    public TServiceOfferType as(String alias) {
        return new TServiceOfferType(DSL.name(alias), this);
    }

    @Override
    public TServiceOfferType as(Name alias) {
        return new TServiceOfferType(alias, this);
    }

    @Override
    public TServiceOfferType as(Table<?> alias) {
        return new TServiceOfferType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TServiceOfferType rename(String name) {
        return new TServiceOfferType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TServiceOfferType rename(Name name) {
        return new TServiceOfferType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TServiceOfferType rename(Table<?> name) {
        return new TServiceOfferType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

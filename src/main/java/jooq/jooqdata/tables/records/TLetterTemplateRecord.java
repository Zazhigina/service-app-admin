/*
 * This file is generated by jOOQ.
 */
package jooqdata.tables.records;


import java.time.LocalDateTime;

import jooqdata.tables.TLetterTemplate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Шаблон письма
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TLetterTemplateRecord extends UpdatableRecordImpl<TLetterTemplateRecord> implements Record11<Long, String, String, Long, LocalDateTime, String, LocalDateTime, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>admin.t_letter_template.id</code>. ID
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.id</code>. ID
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>admin.t_letter_template.letter_type</code>. Параметр имя
     */
    public void setLetterType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.letter_type</code>. Параметр имя
     */
    public String getLetterType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>admin.t_letter_template.title</code>. Заголовок
     */
    public void setTitle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.title</code>. Заголовок
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>admin.t_letter_template.letter_sample</code>. Документ
     */
    public void setLetterSample(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.letter_sample</code>. Документ
     */
    public Long getLetterSample() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>admin.t_letter_template.create_date</code>. Дата и время
     * создания
     */
    public void setCreateDate(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.create_date</code>. Дата и время
     * создания
     */
    public LocalDateTime getCreateDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>admin.t_letter_template.create_user</code>. Автор
     * создания
     */
    public void setCreateUser(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.create_user</code>. Автор
     * создания
     */
    public String getCreateUser() {
        return (String) get(5);
    }

    /**
     * Setter for <code>admin.t_letter_template.last_update_date</code>. Дата и
     * время изменения
     */
    public void setLastUpdateDate(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.last_update_date</code>. Дата и
     * время изменения
     */
    public LocalDateTime getLastUpdateDate() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>admin.t_letter_template.last_update_user</code>. Автор
     * изменения
     */
    public void setLastUpdateUser(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.last_update_user</code>. Автор
     * изменения
     */
    public String getLastUpdateUser() {
        return (String) get(7);
    }

    /**
     * Setter for <code>admin.t_letter_template.type_template</code>. Вид
     * шаблона. Enum: Документ, Шаблон
     */
    public void setTypeTemplate(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.type_template</code>. Вид
     * шаблона. Enum: Документ, Шаблон
     */
    public String getTypeTemplate() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>admin.t_letter_template.acceptable_document_format</code>.
     * Допустимый формат документа. Enum: doc, docx, html
     */
    public void setAcceptableDocumentFormat(String value) {
        set(9, value);
    }

    /**
     * Getter for
     * <code>admin.t_letter_template.acceptable_document_format</code>.
     * Допустимый формат документа. Enum: doc, docx, html
     */
    public String getAcceptableDocumentFormat() {
        return (String) get(9);
    }

    /**
     * Setter for <code>admin.t_letter_template.status</code>. Статус
     */
    public void setStatus(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>admin.t_letter_template.status</code>. Статус
     */
    public String getStatus() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, Long, LocalDateTime, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, String, String, Long, LocalDateTime, String, LocalDateTime, String, String, String, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TLetterTemplate.T_LETTER_TEMPLATE.ID;
    }

    @Override
    public Field<String> field2() {
        return TLetterTemplate.T_LETTER_TEMPLATE.LETTER_TYPE;
    }

    @Override
    public Field<String> field3() {
        return TLetterTemplate.T_LETTER_TEMPLATE.TITLE;
    }

    @Override
    public Field<Long> field4() {
        return TLetterTemplate.T_LETTER_TEMPLATE.LETTER_SAMPLE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return TLetterTemplate.T_LETTER_TEMPLATE.CREATE_DATE;
    }

    @Override
    public Field<String> field6() {
        return TLetterTemplate.T_LETTER_TEMPLATE.CREATE_USER;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return TLetterTemplate.T_LETTER_TEMPLATE.LAST_UPDATE_DATE;
    }

    @Override
    public Field<String> field8() {
        return TLetterTemplate.T_LETTER_TEMPLATE.LAST_UPDATE_USER;
    }

    @Override
    public Field<String> field9() {
        return TLetterTemplate.T_LETTER_TEMPLATE.TYPE_TEMPLATE;
    }

    @Override
    public Field<String> field10() {
        return TLetterTemplate.T_LETTER_TEMPLATE.ACCEPTABLE_DOCUMENT_FORMAT;
    }

    @Override
    public Field<String> field11() {
        return TLetterTemplate.T_LETTER_TEMPLATE.STATUS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getLetterType();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public Long component4() {
        return getLetterSample();
    }

    @Override
    public LocalDateTime component5() {
        return getCreateDate();
    }

    @Override
    public String component6() {
        return getCreateUser();
    }

    @Override
    public LocalDateTime component7() {
        return getLastUpdateDate();
    }

    @Override
    public String component8() {
        return getLastUpdateUser();
    }

    @Override
    public String component9() {
        return getTypeTemplate();
    }

    @Override
    public String component10() {
        return getAcceptableDocumentFormat();
    }

    @Override
    public String component11() {
        return getStatus();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getLetterType();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public Long value4() {
        return getLetterSample();
    }

    @Override
    public LocalDateTime value5() {
        return getCreateDate();
    }

    @Override
    public String value6() {
        return getCreateUser();
    }

    @Override
    public LocalDateTime value7() {
        return getLastUpdateDate();
    }

    @Override
    public String value8() {
        return getLastUpdateUser();
    }

    @Override
    public String value9() {
        return getTypeTemplate();
    }

    @Override
    public String value10() {
        return getAcceptableDocumentFormat();
    }

    @Override
    public String value11() {
        return getStatus();
    }

    @Override
    public TLetterTemplateRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value2(String value) {
        setLetterType(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value4(Long value) {
        setLetterSample(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value5(LocalDateTime value) {
        setCreateDate(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value6(String value) {
        setCreateUser(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value7(LocalDateTime value) {
        setLastUpdateDate(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value8(String value) {
        setLastUpdateUser(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value9(String value) {
        setTypeTemplate(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value10(String value) {
        setAcceptableDocumentFormat(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord value11(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public TLetterTemplateRecord values(Long value1, String value2, String value3, Long value4, LocalDateTime value5, String value6, LocalDateTime value7, String value8, String value9, String value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TLetterTemplateRecord
     */
    public TLetterTemplateRecord() {
        super(TLetterTemplate.T_LETTER_TEMPLATE);
    }

    /**
     * Create a detached, initialised TLetterTemplateRecord
     */
    public TLetterTemplateRecord(Long id, String letterType, String title, Long letterSample, LocalDateTime createDate, String createUser, LocalDateTime lastUpdateDate, String lastUpdateUser, String typeTemplate, String acceptableDocumentFormat, String status) {
        super(TLetterTemplate.T_LETTER_TEMPLATE);

        setId(id);
        setLetterType(letterType);
        setTitle(title);
        setLetterSample(letterSample);
        setCreateDate(createDate);
        setCreateUser(createUser);
        setLastUpdateDate(lastUpdateDate);
        setLastUpdateUser(lastUpdateUser);
        setTypeTemplate(typeTemplate);
        setAcceptableDocumentFormat(acceptableDocumentFormat);
        setStatus(status);
    }
}
